{% extends "chart-editor.twig" %}
{% block content %}

{{ parent() }}

{% set vismeta = chart.metadata.visualize %}

<script type="text/javascript">

$(function() {

    function classify(s) {
        s = s.replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
        s = s.substr(0, 1).toUpperCase() + s.substr(1);
        return s;
    }

    $.fn.colorpicker = function(props) {
        var rt = $(this),
            colors = rt.data('colors').split(','),
            active = rt.data('color');
        // clean up html at first
        rt.html('');
        rt.css({
            position: 'relative'
        });
        var c = 0, r = 0;
        $.each(colors, function(i, col) {
            var d = $('<div />');
            if ((c+1)*28 > rt.parent().width()) {
                c = 0;
                r+=1;
                rt.css('height', (r+1)*28+4);
            }
            d.css({
                position: 'absolute',
                left: c*28 - (col == active ? 1 : 0),
                top: r*28 + (col == active ? -1 : 0),
                height: 26,
                width: 26,
                cursor: 'pointer',
                background: col,
                'border-radius': col == active ? 4 : 0,
                'border-width': col == active ? 3 : 2,
                'border-style': 'solid',
                'border-color': col == active ? 'black' : 'white',
                'z-index': (col == active ? '10' : '0')
            });
            d.data('color', col);
            d.click(function(e) {
                var a = $(e.target);
                rt.data('color', a.data('color'));
                rt.colorpicker(props);
                if (props && props.change) props.change(rt.data('color'));
            });
            rt.append(d);
            c += 1;

        });
    };

    var _typeHasChanged = false,
        _themeHasChanged = false,
        chart = DW.currentChart,
        themes = {{ themes | json | raw }},
        themesById = {};

    $.each(themes, function(i, theme) { themesById[theme.id] = theme; themesById[theme.id].__loaded = false });

    function loadThemeColors() {
        var picker = $('#select-color'),
            themeid = $('#select-theme').val(),
            theme = themesById[themeid],
            needed = [themeid];
        while (theme['extends']) {
            needed.unshift(theme['extends']);
            theme = themesById[theme['extends']];
        }
        function loadNext() {
            if (needed.length > 0) {
                var next = themesById[needed.shift()];
                if (!next.__loaded) {
                    next.__loaded = true;
                    $.getScript('/static/themes/' + next.id + '/theme.js', loadNext);
                } else {
                    loadNext();
                }
            } else {
                allLoaded();
            }
        }
        function allLoaded() {
            var themeClass = classify(themeid),
                theTheme = Datawrapper.Themes[themeClass];

            picker.data('colors', theTheme.colors.palette.join(','));
            picker.data('color', theTheme.colors.palette[chart.get('metadata.visualize.base-color', 0)]);
            picker.colorpicker({
                change: function(color) {
                    chart.set('metadata.visualize.base-color', theTheme.colors.palette.indexOf(color));
                }
            });
            chart.set('metadata.publish.background', theTheme.colors.background);
            chart.set('metadata.publish.text', theTheme.colors.text);
        }
        loadNext();
    } // end loadThemeColors()

    function loadOptions() {
        $('#vis-options').load('/xhr/'+chart.get('id')+'/vis-options?nocache='+Math.random(), function() {
            // update colors
            loadThemeColors();
        });
    }

    chart.onSave(function(chart) {

        $('#iframe-vis').attr('src', '/chart/{{ chart.id }}/preview?nocache='+Math.random());

        if (_themeHasChanged) {
            $("#iframe-vis").load(updateVisBackground);
            _.each(themes, function(theme) {
                if (theme.id == chart.get('theme')) {
                    if (theme.default_width) $('#iframe-wrapper').width(theme.default_width);
                    else $('#iframe-wrapper').width('auto');
                    if (theme.default_height) $('#iframe-wrapper').height(theme.default_height);
                    return false;
                }
            });
        }

        if (_typeHasChanged || _themeHasChanged) {
            // load new visualization options
            loadOptions();
        }

        _themeHasChanged = false;
        _typeHasChanged = false;
    });

    chart.sync('#select-vis', 'type');
    chart.sync('#select-theme', 'theme');
    chart.sync('#text-title', 'title');
    chart.sync('#text-intro', 'metadata.describe.intro');

    chart.onChange(function(chart, key, value) {
        if (key == 'type') {
            _typeHasChanged = true;
        } else if (key == 'theme') {
            _themeHasChanged = true;
        }
    });

    // load dataset
    function _getHighlights() {
        var sel = chart.get('metadata.visualize.highlighted-series');
        return _.isArray(sel) ? sel.slice() : [];
    }

    function highlightSeriesClick(e) {
        var badge = $(e.target).parents('.badge'),
            series = badge.data('series'),
            li = badge;
            selected = _getHighlights();
        selected = _.without(selected, String(series));
        chart.set('metadata.visualize.highlighted-series', selected);
        li.remove();
        e.preventDefault();
    }
    $('.highlighted-series .badge').click(highlightSeriesClick);

    chart.dataset(function(ds) {
        var s = $('#highlight-series'), s2 = $('.highlighted-series');
        _.each(chart.dataSeries(), function(col) {
            s.append('<option>'+col.name+'</option>');
        });
        s.change(function() {
            if (s.val() != "---") {
                var selected = _getHighlights();
                if (_.indexOf(selected, s.val()) >= 0) {
                    s.val('---');
                    return;
                }

                var span = $('<span data-series="'+s.val()+'" class="badge badge-info"><i class="icon-remove icon-white"></i>'+s.val()+'</span>');

                selected.push(s.val());

                chart.set('metadata.visualize.highlighted-series', selected);

                s2.append(span);
                span.click(highlightSeriesClick);
                s.val('---');
            }
        });
        _.each(themes, function(theme) {
            if (theme.id == chart.get('theme')) {
                if (theme.default_width) $('#iframe-wrapper').width(theme.default_width);
                else $('#iframe-wrapper').width('auto');
                if (theme.default_height) $('#iframe-wrapper').height(theme.default_height);
                return false;
            }
        });
        loadThemeColors();
    });

    $('.collapse').on('shown', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-shown');
        tgl.removeClass('collapse-hidden');
    });

    $('.collapse').on('hidden', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-hidden');
        tgl.removeClass('collapse-shown');
    });

    function updateVisBackground() {
        var bgcol =  $('body', $('#iframe-vis').contents()).css('background-color'),
            white = bgcol == 'rgb(255, 255, 255)' || bgcol == '#ffffff' || bgcol == 'white' || bgcol == 'transparent',
            border = white ? '#ffffff' : '#bbb';

        $('#iframe-wrapper').css({
            'background-color': white ? '#ffffff' : bgcol,
            'border-color': border
        })
    }

    $('#iframe-vis').load(updateVisBackground);

    $('.nav-tabs').each(function(i, el) {
        var navTabs = $(el);
        $('li a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).hide();
            $(el).click(function(e) {
                e.preventDefault();
                $('.' + navTabs.data('target') + ' > div').hide();
                $('.' + $(e.target).data('target')).show();
                $('li', navTabs).removeClass('active');
                $(e.target).parents('li').addClass('active');
            });
        });
        $('li.active a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).show();
        });
    });

    $('#btn-transpose').click(function(e) {
        e.preventDefault();
        chart.set('metadata.data.transpose', !chart.get('metadata.data.transpose'));
        setTimeout(function() {
            loadOptions();
        }, 2000);
    });
});

</script>

<div class="dw-create-visualize">

    <div class="row">
        <div class="span7">

            <div id="iframe-wrapper" style="height:500px;">
                <iframe src="/chart/{{ chart.id }}/preview" id="iframe-vis">
                </iframe>
            </div>

        </div>


        <div class="span5 visconfig"><div class="well">
            <div class="section">
                <h3>{% trans "Select visualization and layout" %}</h3>
                    <div class="half">
                        <label for="select-vis">{% trans "Visualization:" %}</label>
                        <select id="select-vis">
                            {% for vis in visualizations %}{% if vis.title %}
                            <option value="{{ vis.id }}">{{ vis.title[language] }}</option>
                            {% endif %}{% endfor %}
                        </select>
                    </div>

                    <div class="half">
                        <label for="select-theme">{% trans "Layout:" %}</label>
                        <select id="select-theme">
                            {% for theme in themes %}{% if not theme.hidden %}
                            <option value="{{ theme.id }}">{{ theme.title }}</option>
                            {% endif %}{% endfor %}
                        </select>
                    </div>
                <div class="clearfix"></div>
                    <p>
                        <b>{% trans "Hint" %}:</b> {% trans "In case the visualization doesn't look like you expected, you should try to <a href='#' id='btn-transpose'><i class='icon-rotate'></i> transpose the data</a>." %}
                    </p>
            </div>

            <div class="section">
                <h3>{% trans "Tell your story" %}</h3>

                <ul class="nav nav-tabs" data-target="story">
                    <li class="active"><a href="#" data-target="story-title">{% trans "Title" %}</a></li>
                    <li><a href="#" data-target="story-intro">{% trans "Introduction" %}</a></li>
                    <li><a href="#" data-target="story-highlight">{% trans "Highlight" %}</a></li>
                </ul>

                <div class="story">
                    <div class="story-title">
                        <label for="text-title">{% trans "Tell the story in five words (85 chars max.)" %}:</label>
                        <input type="text" id="text-title" class="input-xlarge span4" maxlength="85" />
                    </div>

                    <div class="story-intro">
                        <label for="text-intro">{% trans "Guide the audience to read the chart (max. 3 lines á 100 chars)" %}:</label>
                        <textarea type="text" id="text-intro" class="input-xlarge span4" maxlength="300"></textarea>
                    </div>

                    <div class="story-highlight">
                        <label>{% trans "Highlight the most import data series:" %}</label>
                        <div>
                            <select id="highlight-series" class="span2">
                                <option value="---">- {% trans "select a data series" %} -</option>
                            </select>
                        </div>
                        <p class="highlighted-series">
                            {% for series in vismeta['highlighted-series'] %}
                            <span data-series="{{ series }}" class="badge badge-info"><i class="icon-remove icon-white"></i>{{ series }}</span>
                            {% endfor %}
                        </p>
                    </div>
                </div>

                {# highlight values }

                <label>
                    <a data-toggle="collapse" data-target="#c-highlight-values" class="collapse-{% if vismeta.highlighted-values %}shown{% else %}hidden{% endif %}">Highlight values</a>
                </label>
                <div class="collapse{% if vismeta.highlighted-values %} in{% endif %}" id="c-highlight-values">
                    <div class="form-horizontal">
                        <label>Value: <input type="text" class="span1" /> <input type="text" class="span2" placeholder="comment" /></label>
                    </div>
                </div>

                {# customize tooltips }

                <label><a data-toggle="collapse" data-target="#c-tooltips">{% trans "Customize Tooltips" %}</a></label>
                <div class="collapse" id="c-tooltips">
                    <label class="control-label">{% trans "Tooltip content" %}</label>
                    <div class="controls">
                        <textarea style="width:100%" placeholder="not implemented yet"></textarea>
                    </div>
                </div>

                #}
            </div>

            {# visualization specific options #}

            <div class="section">
                <h3>{% trans "Refine the chart" %}</h3>

                <div id="vis-options" class="form-horizontal">
                    {% use 'vis-options.twig' %}
                    {{ block('visoptions') }}
                </div>
            </div>

            <a href="publish" class="submit pull-right btn btn-primary btn-large" id="visualize-proceed">{% trans "Publish" %} <i class="icon-chevron-right icon-white"></i></a>
            <a class="btn submit" href="describe"><i class="icon-chevron-left"></i> {% trans "Back" %}</a>
            <div class="clearfix"></div>
        </div>

    </div>
</div>



</div>


{% endblock %}